//GO
-	Strong and Statically typed.
		//Strong typed: if variable a is of integer type then it will always hold that type of dta only.
		//Statically typed: All of the variables have to be defined at compile time.

-	Fast compile times
-	Garbage collected
-	Compile to standalone binaries	
	
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin

export GOPATH=/home/fabric/go/golib
export PATH=$PATH:$GOPATH/bin
export GOPATH=$GOPATH:/home/fabric/go/code	

source ~/.bashrc

	> code
		> src
		> pkg
		> bin
		

	//go run 		.\src\github.com\chinmoyd1\firstapp
	//go build 		.\src\github.com\chinmoyd1\firstapp    //.exe
	//go install	.\src\github.com\chinmoyd1\firstapp	  //install in os
--------------------------------------------------------------------------------------		
//Variables

	* Variable declaration
		- var foo int
		- var foo int = 42
		- foo := 42
		
	* Can't redeclare variables, but can shadow them.
	
	* All variables must be used.
	
	* Visibility
		- lower case first letter package scope
		- upper case first letter for export
		- no private scope
		
	* Type Conversion
		import (
			"fmt"
			"strconv"
		)

		func main()[
			var i int = 42
			fmt.Printf("%v, %T\n", i, i)
			
			var j float32
			j = float32(i)
			fmt.Printf("%v, %T\n", j, j)
			
			var j string
			j = strconv.Itoa(i)
			fmt.printf("%v, %T\n", j, j)
		}
		
		- use strconv for int to string
		
--------------------------------------------------------------------------------------
//Primitives

	* Boolean type
		- Not an alias for other types(e.g. int)
		- default value is false
		
	* Numeric types
		- Integers
			- Signed Integers
				- int type has varying size default 32
				- 8 bit(int8) through 64 bit(int64)
			- Unsigned Integers
				- 8 bit(byte and unit8) through 32 bit(unit32)
			- Arithmetic operations
				- Addition, substraction, multiplication, division, remainder
			- Bitwise operations
				- And, or, xor and not
			- cant mix types in same family!(unit16 + unit32 = error)
		- Floating numbers
			- 32 and 64 bit version
			- Arithmetic operations
				- Addition, substraction, multiplication, division
		- Complex numbers
			- 64 and 128 bit versions
	
	* Text types
		- Strings
			- UTF-8
			- immutable
			- can be concatenated with plus(+) operator
			- can be converted to []byte
	
		- Rune
			- UTF-32
			- Alias for int32
			- Special methods normally required to process
				- e.g. strings.Reader
		
		
	func main() {
		var n bool = false
		fmt.printf("%v, %T\n", n, n)
	}
	
--------------------------------------------------------------------------------------
//Constants
	- Immutable, but can be shadowed
	- Replace by the compiler at compile time
	- can interoprate only with same type
	- untyped can interoperate with similar types
	
	const (
		a = 12
		b = 32
		c = 45
	)

--------------------------------------------------------------------------------------
//Arrays(by value)
	
	func main(){
		grades := [3]int{89, 78, 67}
		fmt.Printf("Grades: %v", grades)
	}
	
	func main(){
		grades := [...]int{89, 78, 67}
		fmt.Printf("Grades: %v", grades)
	}

	func main(){
		var students [3]string
		fmt.Printf("Students: %v", students)
		
		studemts[0] = "Lisa"
		
		fmt.Printf("Number of Students: %v\n", len(students))
	}
	
	func main() {
		a := [...]iny{1,2,3,4,5,6,7,8,9}
		b := a[:]	//slice of all elements
		c := a[3:]	//slice from 4th element to end
		d := a[:6]	//slice first 6 elements
		e := a[3:6] //slice the 4th, 5th and 6th elements
	}

	func main(){
		var identityMatrix [3][3]int = [3][3]int{ [3]int{1,0,0}, [3]int{0,1,0}, [3]int{0,0,1} }
		
		var identityMatrix [3][3]int
		 identityMatrix[0] = [3]int{1,0,0}
		 identityMatrix[1] = [3]int{1,0,0}
		 identityMatrix[2] = [3]int{1,0,0}
	}
	
//Slice
	func main(){
		grades := []int{89, 78, 67}
		fmt.Printf("Grades: %v", grades)
	}
	
	func main() {
		a := []iny{1,2,3,4,5,6,7,8,9}
		b := a[:]	//slice of all elements
		c := a[3:]	//slice from 4th element to end
		d := a[:6]	//slice first 6 elements
		e := a[3:6] //slice the 4th, 5th and 6th elements
	}
	
	func main(){
		var students []string
		fmt.Printf("Students: %v", students)
		
		studemts[0] = "Lisa"
		
		fmt.Printf("Number of Students: %v\n", len(students))
		fmt.Printf("Number of Students: %v\n", cap(students))
	}
	
	func main(){
		a := make([]int, 3)		
		a := make([]int, 3, 100) //capacity of 100
	}
	
	func main() {
		a := []int{}
		fmt.Println(a)
		fmt.Printf("Lenght: %v\n", len(a))
		fmt.Printf("Capacity: %v\n", cap(a))
		a = append(a, 1)
		fmt.Println(a)
		fmt.Printf("Lenght: %v\n", len(a))
		fmt.Printf("Capacity: %v\n", cap(a))	
		a = append(a, 1, 2, 3, 4, 5)
		
		a = append(a, []int{1, 2, 3, 4, 5}...)
	}

	[]
	Length: 0
	Capacity: 0
	[1]
	Length: 1
	Capacity: 2
	
	func main() {
		a := []int{1, 2, 3, 4, 5}
		b := append(a[:2], a[3:]...)  //[1 2 4 5]
		fmt.Print(b)
	}
	
	
--------------------------------------------------------------------------------------
//Maps

func main() {
	statePopulations := map[string]int{
		"California": 	8989898,
		"Texas":	  	34243424,
		"Florida":	  	20612438,
		"New York":	  	19834356,
		"Pennsylvania":	12802503
	}
	fmt.Println(statePopulations)
}

** Keys has to be tested for equlity to act as a map keys
** Slice, maps and other functions can not be key for map

//using make
func main() {
	statePopulations := make(map[string]int)
	statePopulations := map[string]int{
		"California": 	8989898,
		"Texas":	  	34243424,
		"Florida":	  	20612438,
		"New York":	  	19834356,
		"Pennsylvania":	12802503
	}
	
	statePopulations["Georgia"] = 106080
	delete(statePopulations, "Texas")
	fmt.Println(statePopulations)
	
	_, ok := statePopulation["Texas"]
	fmt.Println(ok)
	
	fmt.Println("length: ",len(statePopulations))
}

Output: 

map[California:8989898,Georgia:106080,Florida:20612438,New York:19834356,Pennsylvania:12802503]
0 false
length: 5


//Structs (value type)

type Doctor struct {
	Number int
	ActorName string
	Companies []string
	Epispdes []string
}

func main() {
	aDoctor:= Doctor{
		Number: 	3
		ActorName: 	"Jon Pertwee",
		Companies:	[]string {
			"Liz Shaw",
			"Jo Grant"
			"Sarah Jane Smith"
		},
	}
	fmt.Println(aDoctor.ActorName)
	fmt.Println(aDoctor.Companions[1])
}


// Anonymus Struct

func main() {
	aDoctor := struct{name string}{name: "John Pertwee"}
	fmt.Println(aDoctor)
	
	anotherDoctor := aDoctor		//anotherDoctor := &aDoctor
	anotherDoctor.name = "Tom Baker"
	fmt.Println(aDoctor)
	fmt.Println(anotherDoctor)
}
Output:
{John Pertwee}
{Tom Baker}


type Animal struct {
	Name string
	Origin string
}

type Bird struct {
	Animal
	SpeedKPH float32
	CanFly	 bool
}

func main() {
	b := Bird{}
	b.Name = "Emu"
	b.Origin = "Australia"
	b.SpeedKPH = 48
	b.CanFly = false
	fmt.Println(b)
}

//OR

func main() {
	b := Bird{
			Animal:   Animal{Name: "Emu", Origin: "Australia"},
			SpeedKPH: 30,
			CanFly:	  false,
	}
	fmt.Println(b)
}

{{Emu Australia} 48 false}


//Tag
import (
	"fmt"
	"reflect"
)
type Animal struct {
	Name string `required max:"100"`
	Origin string
}

func main() {
	t := reflect.TypeOf(Animal{})
	field, _:= t.FieldByName("Name")
	fmt.Println(field.Tag)
}


--------------------------------------------------------------------------------------
//Control Flow


func main() {
	statePopulations := map[string]int{
		"California": 	8989898,
		"Texas":	  	34243424,
		"Florida":	  	20612438,
		"New York":	  	19834356,
		"Pennsylvania":	12802503
	}
	if pop, ok := statePopulations["Florida"]; ok {
		fmt.Println(pop)
	}
}


func main() {
	switch 3 {
		case 1, 5, 10:
			fmt.Println("one")
		case 2, 4, 6:
			fmt.Println("two")
		default:
			fmt.Println("not one or two")
	}
}

func main() {
	i := 10
	switch {
		case i <= 10:
			fmt.Println("less than or equal to ten")
			fallthrough
		case i >= 20:
			fmt.Println("less than or equal to twenty")
		default:
			fmt.Printlb("greater than twenty")
	}
}

output:
less than or equal to ten
less than or equl to twenty


--------------------------------------------------------------------------------------
//Looping

import (
	"fmt"
)

func main() {
	for i := 0; i < 5; i++ {
		fmt.Println(i)
	}
}


func main() {
	for i, j := 0, 0; i < 5; i, j = i+1, j+2 {
		fmt.Println(i, j)
	}
}


func main() {
	i := 0
	for ; i < 5;  {
		fmt.Println(i)
		i++
	}
	fmt.Println(i)

	for i < 5  {
		fmt.Println(i)
		i++
	}
}


func main() {
	i := 0
	for {
		  fmt.Println(i)
		  i++
		  if i == 5 {
			break
		  }
	}
}

func main() {
	for i :=0; i < 10; i++ {
		if i%2 == 0 {
			continue
		}
		fmt.Println(i)
	}
}


// Labels

func main() {
Loop:
		for i := 1; i <= 3; i++ {
			for j := 1; j <= 3; j++ {
				fmt.Println(i * j)
				if i * j >= 3 {
					breal Loop
				}
			}
		}
}


//range

func main() {
	s := []int{1, 2, 3}
	for k, v := range s {
		fmt.Println(k,v)
	}
}

func main() {
	s := "hello Go!"
	for k,v := range s {
		fmt.Println(k, string(v))
	}
}
0 h
1 e
2 l
3 l
4 o
5 
6 g
7 o


--------------------------------------------------------------------------------------
//Control Flow
	
//Defer
	
	func main(){
		fmt.Println("start")
		defer fmt.Printin("middle")
		fmt.Println("end")
	}
	
	output:
	start
	end
	middle

	func main() {
		a := "start"
		defer fmt.Println(a)
		a = "end"
	}
	
	output:
	start

//Panic
	
	func main() {
		fmt.Println("start")
		defer fmt.Println("this was deferred")
		panic("something bad happened")
		fmt.Println("end")
	}
	
	output:
	start
	this was defferd
	panic: something bad happened


	** When recovering from a panic, the function which panics still stops execution 
	because its in a state where it cant be trusted 
	** However the functions higher in the call stack still resumes
	** you can rethrow the error by panic(err) to send the error to higher up functions
	panic(err)
	
//Recover
	** Used to recover from panics
	** Only useful in defered functions
	** Current function will not attempt to continue, but higher functions in call stack will

	func panicker() {
		fmt.Println("abiut to panic")
		defer func() {
			if  err := recover(); err != nil {
				log.Println("Error:", err)
			}
		}()
		panic(something bad happened)
		
		
	}

--------------------------------------------------------------------------------------
//Pointers
** Pointer arithmetic is not allowed

func main (){
	var a int =42
	var b *int = &a  //b := &a
	fmt.Println(a, *b)
	a = 27
	fmt.Println(a, *b)  //*b defrerence will point to a
	*b = 14
	fmt.Println(a, *b)
}

output:
42 42
27 27
14 14


--------------------------------------------------------------------------------------
//Function


import (
	"fmt"
)

func main() {
	sayMessage("Hello Go!")
	sayGreeting("Hello", "Stacey")
}

func sayMessage(msg string) {
	fmt.Println(msg)
}

func sayGreeting(greeting, name string) {
	fmt.Println(greeting, name)
}




func main() {
	greeting := "Hello"
	name := "Stacey"
	sayGreeting(&greeting, &name)
	fmt.Println(name)
}

func sayGreeting(greeting, name *string) {
	fmt.Println(*greeting, *name)
	*name = "Ted"
	fmt.Println(*name)
}

Output:
Hello Stacey
Ted
Ted

- Variotic Parameter //It must be the last parameter

func main() {
	sum(1, 2, 3 , 4 , 5)
}

func sum(values ...int) {
	fmt.Println(values)
	result := 0
	for _, v := range values {
		result += v
	}
	fmt.Println("The sum is ", result)
}

output:
[1 2 3 4 5]
The sum is 15


func main() {
	s := sum(1, 2, 3 , 4 , 5)
	fmt.Println("The sum is ", s)
}

func sum(values ...int) int{
	fmt.Println(values)
	result := 0
	for _, v := range values {
		result += v
	}
	return result
}
	or
func sum(values ...int) (result int){
	fmt.Println(values)
	result := 0
	for _, v := range values {
		result += v
	}
	return 
}


func main() {
	d, err := divide(5.0, 0.0)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(d)
}

func divide(a, b float64) (float64, error) {
	if b == 0.0 {
		return 0.0, fmt.Errorf("Cannot divide by zero")
	}
	return a / b, nil
}

Output:
Can not divide by zero

//Anonymus function

func main() {
	func() {
		fmt.Println("Hello Go!")
	}()
}

Output:
Hello Go!



func main() {
	//var f func() := func() {
	f := func() {
		fmt.Println("Hello Go!")
	}
	f()
}

Output:
Hello Go!


func main() {
	var divide func(float64, floa64) (float64, error)
	divide = func(a, b float64) (float64, error) {
		if b == 0.0 {
			return 0.0, fmt.Errorf("Cannot divide by zero")
		}
		return a / b, nil
	}

	d, err := divide(5.0, 0.0)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(d)
}


// Method (It provides a context to the function to operate on same as passing arguments/synacticalSugar)

func main() {
	g := greeter{
		greeting: "Hello",
		name: "Go",
	}
	g.greeet()
}

type greeter struct {
	greeting string
	name string
}

func (g greeter) greet() {
	fmt.Println(g.greeting, g.name)
}





--------------------------------------------------------------------------------------
//Interfaces






























































