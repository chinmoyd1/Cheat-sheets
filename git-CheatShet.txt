//Creating new Repo
	$ git diff --stat --cached origin/master
	$ git clone username@host:/path/to/repository

	$ git add <filename>
	$ git add *

	$ git commit -m "Commit message"

	$ git remote add origin <server>
	$ git push origin master
	// For updating repo
	$ git pull

//Pulling an existing branch
	$ git clone username@host:/path/to/repository
	$ git pull origin <Branch_name>
	$ git checkout <Branch_name>
	$ git branch
	
	$ git checkout --track origin/newsletter
	
//Creating new branch and pushing it to remote repo
	$ git checkout -b Branch1
	$ git add <filename>
	$ git commit -m "commit-message"
	$ git push --set-upstream origin Branch1
	
//Merge to master branch
	$ git checkout master
	$ git pull origin master
	$ git merge <branch>
	$ git push origin master
	
	$ git clone -b camera-list https://vivekn-wobot@bitbucket.org/vivekn-wobot/playback.git

// Squashing multiple changes in one	
	$ git rebase -i HEAD~10
	<change pick to s, only retain the first pick>
	<Then change the messages accordingly>
	$ git push origin demo -f
	
//Rebaseing to master branch
	$ git checkout master
	$ git pull
	$ git checkout <my_branch>
	$ git rebase master
	
	$ git checkout master
	$ git rebase <my_branch>
	
//Conflict issues
	// to apply the new patch which is creating conflict
	$ git rebase --continue
	
	//If you prefer to skip this patch, run 
	$ git rebase --skip
	
//Deleteing a branch
	$ git checkout master
	$ git branch -d Branch1
	$ git push origin -d Branch1
	
	
//Reset Status	
	$ git reset head
	
//Pushing to existing branch
	$ git push origin branchName
	
//Delete remote branch
	$ git push origin --delete test

//Delete local branch
	$ git branch -d test


// Unstage a file
	$ git reset HEAD *
// *******Unstage and keeps in staging area
	$ git reset --soft HEAD~1
// Unstage and keeps in working area
	$ git reset --mixed HEAD~1
// Unstage and revert those changes from working tree(changes wont be present in file)
	$ git reset --hard HEAD~1
// Remove commit from local repo (to be used only when commit is local not remote)
	$ git reset HEAD~1
	
// Revert commit from remote
	$ git revert 65rewgrj7
// Revert multiple commits
	$ git revert --no-commit most_recent_commit 2nd_most_recent_commit 3rd_most_recent etc..
	$ git commit -m "back to commit 1"

// Stash
	$ git stash save "impCahnge"
	$ git stash pop
	$ git stash list
	$ git stash drop

// Tag
// Create Taggit 
	$ git tag v1.0
// Create anotated tag
	$ git tag -a v1.1 -m "tag for release ver 1.1"
// View tags
	$ git tag
	$ git show v1.0
	$ git show -l v1.*
// Push tag to remote
	$ git push origin v1.0
	$ git push --tags  // to push all tags
// Delete Tag from local
	$ git tag -d v1.0
// Delete Tag from remte
	$ git push origin -d v1.0
// Create Branch from a tag and checkout the branch
	$ git checkout -b ReleaseVer1 v1.0
// Create tag from past commit 
	$ git tag v1.3 5fuy6576
	$ git push origin v1.3
	
	
	
